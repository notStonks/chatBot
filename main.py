import uuid
import os
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.message import ContentType
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage

import markups as nav
from db import Database

from utils import get_payment_info, get_buy_keyboard

db = Database("database.db")


dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)

TOKEN = os.getenv("TOKEN")
ROBOKASSATEST = os.getenv("ROBOKASSATEST")
YOOTOKEN = os.getenv("YOOTOKEN")
SBERBANK = os.getenv("SBERBANK")
admin_ID = os.getenv("admin_ID")


bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
#    animation = open('kukard.MP4', 'rb')
#    fayl = open("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.docx","rb")
#    await bot.send_animation(message.from_user.id, animation)
    await bot.send_message(message.from_user.id,'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à Telegram bot <b>{0.first_name}</b>. –ú—ã —Ä–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –≤–º–µ—Å—Ç–µ, –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ–º–Ω–æ–≥–æ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ, —É–∫–∞–∑–∞–Ω–Ω–æ–µ –Ω–∏–∂–µ. '.format(message.from_user), reply_markup = nav.yesMenu, parse_mode="html")
#    await bot.send_document(message.chat.id, document=fayl)


@dp.message_handler(commands=['jojo'])
async def jojo(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id == admin_ID:
            await bot.send_message(message.from_user.id, '–ö–∞–∫–æ–π –Ω–∞–º–∏–Ω–∞–ª?', reply_markup = nav.adminMenu)


class FSMA(StatesGroup):
    cIDA = State()
    codesA = State()

@dp.message_handler(commands='500—Ä—É–±üíµ', state=None)
async def cA(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id == admin_ID:
            await FSMA.cIDA.set()
            await bot.send_message(message.from_user.id,'–° –∫–∞–∫–æ–≥–æ ID –Ω–∞—á–∏–Ω–∞–µ–º?')

@dp.message_handler(state=FSMA.cIDA)
async def imput_ID(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['cIDA'] = message.text[0]
    A = message.text
    db.up_IDA(A)
    await FSMA.next()
    await bot.send_message(message.from_user.id,"–í–≤–æ–¥–∏—Ç–µ –∫–æ–¥")

@dp.message_handler(state=FSMA.codesA)
async def imput_CODE(message: types.Message, state: FSMContext):
    A1 = db.get_IDA()
    A2 = message.text
    db.up_codA(A2,A1)
    await bot.send_message(message.from_user.id,"–ö–æ–¥ –Ω–∞ 500—Ä—É–± —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω!")
    await state.finish()


class FSMB(StatesGroup):
    cIDB = State()
    codesB = State()

@dp.message_handler(commands='1000—Ä—É–±üí¥', state=None)
async def cB(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id == admin_ID:
            await FSMB.cIDB.set()
            await bot.send_message(message.from_user.id,'–° –∫–∞–∫–æ–≥–æ ID –Ω–∞—á–∏–Ω–∞–µ–º?')

@dp.message_handler(state=FSMB.cIDB)
async def imput_ID(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['cIDB'] = message.text[0]
    B = message.text
    db.up_IDB(B)
    await FSMB.next()
    await bot.send_message(message.from_user.id,"–í–≤–æ–¥–∏—Ç–µ –∫–æ–¥")

@dp.message_handler(state=FSMB.codesB)
async def imput_CODE(message: types.Message, state: FSMContext):
    B1 = db.get_IDB()
    B2 = message.text
    db.up_codB(B2,B1)
    await bot.send_message(message.from_user.id,"–ö–æ–¥ –Ω–∞ 1000—Ä—É–± —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω!")
    await state.finish()


class FSMC(StatesGroup):
    cIDC = State()
    codesC = State()

@dp.message_handler(commands='1500—Ä—É–±üí¥', state=None)
async def cC(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id == admin_ID:
            await FSMC.cIDC.set()
            await bot.send_message(message.from_user.id,'–° –∫–∞–∫–æ–≥–æ ID –Ω–∞—á–∏–Ω–∞–µ–º?')

@dp.message_handler(state=FSMC.cIDC)
async def imput_ID(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['cIDC'] = message.text[0]
    C = message.text
    db.up_IDC(C)
    await FSMC.next()
    await bot.send_message(message.from_user.id,"–í–≤–æ–¥–∏—Ç–µ –∫–æ–¥")

@dp.message_handler(state=FSMC.codesC)
async def imput_CODC(message: types.Message, state: FSMContext):
    C1 = db.get_IDC()
    C2 = message.text
    db.up_codC(C2,C1)
    await bot.send_message(message.from_user.id,"–ö–æ–¥ –Ω–∞ 1500—Ä—É–± —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω!")
    await state.finish()


class FSMD(StatesGroup):
    cIDD = State()
    codesD = State()

@dp.message_handler(commands='2000—Ä—É–±üí∂', state=None)
async def cD(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id == admin_ID:
            await FSMD.cIDD.set()
            await bot.send_message(message.from_user.id,'–° –∫–∞–∫–æ–≥–æ ID –Ω–∞—á–∏–Ω–∞–µ–º?')

@dp.message_handler(state=FSMD.cIDD)
async def imput_ID(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['cIDD'] = message.text[0]
    D = message.text
    db.up_IDD(D)
    await FSMD.next()
    await bot.send_message(message.from_user.id,"–í–≤–æ–¥–∏—Ç–µ –∫–æ–¥")

@dp.message_handler(state=FSMD.codesD)
async def imput_CODE(message: types.Message, state: FSMContext):
    D1 = db.get_IDD()
    D2 = message.text
    db.up_codD(D2,D1)
    await bot.send_message(message.from_user.id,"–ö–æ–¥ –Ω–∞ 2000—Ä—É–± —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω!")
    await state.finish()


class FSME(StatesGroup):
    cIDE = State()
    codesE = State()

@dp.message_handler(commands='3000—Ä—É–±üí∂', state=None)
async def cE(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id == admin_ID:
            await FSME.cIDE.set()
            await bot.send_message(message.from_user.id,'–° –∫–∞–∫–æ–≥–æ ID –Ω–∞—á–∏–Ω–∞–µ–º?')

@dp.message_handler(state=FSME.cIDE)
async def imput_ID(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['cIDE'] = message.text[0]
    E = message.text
    db.up_IDE(E)
    await FSME.next()
    await bot.send_message(message.from_user.id,"–í–≤–æ–¥–∏—Ç–µ –∫–æ–¥")

@dp.message_handler(state=FSME.codesE)
async def imput_CODE(message: types.Message, state: FSMContext):
    E1 = db.get_IDE()
    E2 = message.text
    db.up_codE(E2,E1)
    await bot.send_message(message.from_user.id,"–ö–æ–¥ –Ω–∞ 3000—Ä—É–± —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω!")
    await state.finish()


class FSMF(StatesGroup):
    cIDF = State()
    codesF = State()

@dp.message_handler(commands='4000—Ä—É–±üí∂', state=None)
async def cF(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id == admin_ID:
            await FSMF.cIDF.set()
            await bot.send_message(message.from_user.id,'–° –∫–∞–∫–æ–≥–æ ID –Ω–∞—á–∏–Ω–∞–µ–º?')

@dp.message_handler(state=FSMF.cIDF)
async def imput_ID(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['cIDF'] = message.text[0]
    F = message.text
    db.up_IDF(F)
    await FSMF.next()
    await bot.send_message(message.from_user.id,"–í–≤–æ–¥–∏—Ç–µ –∫–æ–¥")

@dp.message_handler(state=FSMF.codesF)
async def imput_CODE(message: types.Message, state: FSMContext):
    F1 = db.get_IDF()
    F2 = message.text
    db.up_codF(F2,F1)
    await bot.send_message(message.from_user.id,"–ö–æ–¥ –Ω–∞ 4000—Ä—É–± —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω!")
    await state.finish()


class FSMG(StatesGroup):
    cIDG = State()
    codesG = State()

@dp.message_handler(commands='5000—Ä—É–±üí∑', state=None)
async def cG(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id == admin_ID:
            await FSMG.cIDG.set()
            await bot.send_message(message.from_user.id,'–° –∫–∞–∫–æ–≥–æ ID –Ω–∞—á–∏–Ω–∞–µ–º?')

@dp.message_handler(state=FSMG.cIDG)
async def imput_ID(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['cIDG'] = message.text[0]
    G = message.text
    db.up_IDG(G)
    await FSMG.next()
    await bot.send_message(message.from_user.id,"–í–≤–æ–¥–∏—Ç–µ –∫–æ–¥")

@dp.message_handler(state=FSMG.codesG)
async def imput_CODE(message: types.Message, state: FSMContext):
    G1 = db.get_IDG()
    G2 = message.text
    db.up_codG(G2,G1)
    await bot.send_message(message.from_user.id,"–ö–æ–¥ –Ω–∞ 5000—Ä—É–± —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω!")
    await state.finish()


@dp.message_handler()
async def bot_message(message: types.Message):
    if message.text == '–°–æ–≥–ª–∞—Å–µ–Ω':
        await bot.send_message(message.from_user.id, '–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ <b>{0.first_name}</b>!–î–∞–ª–µ–µ —Ç—ã –º–æ–∂–µ—à—å —Å–∫–æ—Ä–µ–µ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ –∏–ª–∏ –∂–µ —É–∑–Ω–∞—Ç—å –æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ, –∞ —Ç–∞–∫–∂–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è —Å –≤–æ–∑–Ω–∏–∫—à–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏.'.format(message.from_user), reply_markup = nav.mainMenu,parse_mode="html")

    elif message.text == '–ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω':
        await bot.send_message(message.from_user.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ –º–æ–≥—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É, –±–µ–∑ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.\n–°–æ–≥–ª–∞—à–∞–π—Å—è –∏ —É–ø—Ä–∞–≤–ª—è–π —Å–≤–æ–µ–π –∂–∏–∑–Ω—å—é —Å–∞–º!')
    
    elif message.text == '–£–∑–Ω–∞—Ç—å –æ —Å–µ—Ä–≤–∏—Å–µ –±–æ–ª—å—à–µ':
#        photo = open('kukardJ.jpg', 'rb')
#        await bot.send_photo(message.from_user.id, photo)
        await bot.send_message(message.from_user.id, '–ó–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ –∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–æ–∑–Ω–∏–∫—à–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å.', reply_markup = nav.meMenu)
        await message.delete()

    elif message.text == '–ù–∞—à —Å–∞–π—Ç':
        await bot.send_message(message.from_user.id, 'https://iamdocard.ru/', reply_markup = nav.meMenu)
        await message.delete()

    elif message.text == '–ö—Ç–æ –º—ã?':
        await bot.send_message(message.from_user.id, f'docard ‚Äì –æ–Ω —Ç–∞–∫–æ–π –æ–¥–∏–Ω.\n\n–û–Ω–ª–∞–π–Ω-—Å–µ—Ä–≤–∏—Å, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –∫—É–ø–∏—Ç—å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ–¥–∞—Ä–æ—á–Ω—É—é –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–≤–æ–µ–≥–æ Apple ID.\n\n\n\nüë®‚Äçüéì –ù–∞–º –º–æ–∂–Ω–æ –¥–æ–≤–µ—Ä—è—Ç—å.\n\n–ú—ã –∫–æ–º–∞–Ω–¥–∞ –°—Ç–∞—Ä—Ç–∞–ø-–ø—Ä–æ–µ–∫—Ç–∞, —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—é—â–∞—è —Å –§–æ–Ω–¥–æ–º —Å–æ–¥–µ–π—Å—Ç–≤–∏—è –∏–Ω–Ω–æ–≤–∞—Ü–∏—è–º. –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –∫–æ–Ω–∫—É—Ä—Å–∞ ‚Äú–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π —Å—Ç–∞—Ä—Ç–∞–ø‚Äù –∏ –ø—Ä–æ—Å—Ç–æ –æ–±—ã—á–Ω—ã–µ –ª—é–¥–∏, —Å–ø–æ—Å–æ–±–Ω—ã–µ –Ω–∞ –±–æ–ª—å—à–µ–µ.\n\nüéØ –ù–∞—à–∞ —Ü–µ–ª—å.\n\n–ú—ã –º–æ–ª–æ–¥—ã–µ, –¥–µ—Ä–∑–∫–∏–µ, –∂–∏–≤—ã–µ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ, –ø–æ—ç—Ç–æ–º—É –Ω–∞ –æ–¥–Ω–æ–π –≤–æ–ª–Ω–µ —Å –Ω–∞—à–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –¥–µ–ª–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç.\n\n–ù–∞—à–∞ —Ü–µ–ª—å- —Å–¥–µ–ª–∞—Ç—å –∫–æ–º—Ñ–æ—Ä—Ç–Ω—É—é —ç–∫–æ—Å–∏—Å—Ç–µ–º—É, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—É—é –ª—é–±–æ–π –∂–µ–ª–∞—é—â–∏–π —Å–º–æ–∂–µ—Ç —Å –ª–µ–≥–∫–æ—Å—Ç—å—é –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã, –Ω–µ –ø–æ–∫–∏–¥–∞—è —Ä–æ–¥–Ω—É—é —Å—Ä–µ–¥—É Telegram –∑–∞ —Ä–∞–∑—É–º–Ω—É—é —Ü–µ–Ω—É.\n\nüçè Apple ID —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ.\n\n–ú—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º—Å—è –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å—Å—è –æ–¥–Ω–æ–π —Ç–µ–º–∞—Ç–∏–∫–æ–π Apple ID, –∑–∞ –∫–æ–≥–æ –≤—ã –Ω–∞—Å –¥–µ—Ä–∂–∏—Ç–µ?\n\n–°–µ–π—á–∞—Å –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ–º –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø–æ—Å–ª–µ —á–µ–≥–æ, –Ω–∞—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö, —Ä–∞–Ω–µ–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑-–∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã.\n\nüõ´–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ –±—É–¥—É—â–µ–µ.\n\n–ú—ã –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ–º—Å—è –Ω–∞ —Ç–∞–∫—É—é –∂–µ –º–æ–ª–æ–¥–µ–∂—å –∫–∞–∫ –∏ –º—ã —Å–∞–º–∏ –∏ –¥–≤–∏–≥–∞–µ–º—Å—è –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç, –ø–æ—ç—Ç–æ–º—É –¥–∞–≤–∞–π—Ç–µ –¥–≤–∏–≥–∞—Ç—å—Å—è –≤–ø–µ—Ä–µ–¥ –≤–º–µ—Å—Ç–µ, –±—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—à–∏–º –æ—Ç–∑—ã–≤–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –≤–æ –≤–∫–ª–∞–¥–∫–µ –æ—Ç–∑—ã–≤—ã.\n\n–í –Ω–∞—à–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø–ª–∞–Ω—ã –≤—Ö–æ–¥–∏—Ç —Ä–∞–∑–≤–∏—Ç–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —á–µ—Ä–µ–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä Telegram –∏ –ø–ª–æ–¥–æ—Ç–≤–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º —Å–µ—Ä–≤–∏—Å–∞.\n\nüíû –ú—ã-—ç—Ç–æ –Ω–æ–≤–∞—è –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å.\n\n–•–æ—Ç–∏–º –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ –Ω–∞—à–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞ –æ–∫–∞–∑–∞–Ω–Ω–æ–µ –¥–æ–≤–µ—Ä–∏–µ, –≤ –æ—Ç–≤–µ—Ç –º—ã –±—É–¥–µ–º –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤–µ—Ä–Ω—ã —Å–µ–±–µ, –ø—Ä–∏—Å–ª—É—à–∏–≤–∞—Ç—å—Å—è –∫ –Ω–∞—à–µ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –æ–±–µ—â–∞–µ–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ –≤–º–µ—Å—Ç–µ —Å –≤–∞–º–∏.', reply_markup = nav.meMenu)
        await message.delete()

    elif message.text == '–ü–æ–ø–æ–ª–Ω–∏—Ç—å ‚ÄúApple ID‚Äù':
#        photo = open('impresion.jpg', 'rb')
#        await bot.send_photo(message.from_user.id, photo)
        await bot.send_message(message.from_user.id, '–ó–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –Ω–æ–º–∏–Ω–∞–ª –Ω–∞—à–∏—Ö –∫–∞—Ä—Ç –≤—ã–±–∏—Ä–∞–π –ª—é–±—É—é –∫–æ—Ç–æ—Ä–∞—è –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è!\n–ü–æ–º–Ω–∏, –Ω–∏ —á—Ç–æ –Ω–µ –∏—Å—Ç–∏–Ω–∞ –≤—Å–µ –¥–æ–∑–≤–æ–ª–µ–Ω–æ, –Ω–æ —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã:\n–î–µ–ª–∞–π —á—Ç–æ –ø–æ –∫–∞–π—Ñ—É, –Ω–æ –≤ –º–µ—Ä—É!', reply_markup = nav.payMenu)
        await message.delete()

    elif message.text == '500—Ä':
#        photo = open('500x.jpg', 'rb')
#        await bot.send_photo(message.from_user.id, photo)
        await bot.send_message(message.from_user.id, '–¢—ã –≤—ã–±—Ä–∞–ª –∫–∞—Ä—Ç—É 500 —Ä—É–±–ª–µ–π\n–° —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏, —Ü–µ–Ω–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç:', reply_markup = nav.pay_500_rub)
        await message.delete()

    elif message.text == '1000—Ä':
#        photo = open('1000x.jpg', 'rb')
#        await bot.send_photo(message.from_user.id, photo)
        await bot.send_message(message.from_user.id, '–¢—ã –≤—ã–±—Ä–∞–ª –∫–∞—Ä—Ç—É 1000 —Ä—É–±–ª–µ–π\n–° —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏, —Ü–µ–Ω–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç:', reply_markup = nav.pay_1000_rub)
        await message.delete()
    
    elif message.text == '1500—Ä':
#        photo = open('1500x.jpg', 'rb')
#        await bot.send_photo(message.from_user.id, photo)
        await bot.send_message(message.from_user.id, '–¢—ã –≤—ã–±—Ä–∞–ª –∫–∞—Ä—Ç—É 1500 —Ä—É–±–ª–µ–π\n–° —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏, —Ü–µ–Ω–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç:', reply_markup = nav.pay_1500_rub)
        await message.delete()
    
    elif message.text == '2000—Ä':
#        photo = open('2000x.jpg', 'rb')
#        await bot.send_photo(message.from_user.id, photo)
        await bot.send_message(message.from_user.id, '–¢—ã –≤—ã–±—Ä–∞–ª –∫–∞—Ä—Ç—É 2000 —Ä—É–±–ª–µ–π\n–° —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏, —Ü–µ–Ω–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç:', reply_markup = nav.pay_2000_rub)
        await message.delete()

    elif message.text == '3000—Ä':
#        photo = open('3000x.jpg', 'rb')
#        await bot.send_photo(message.from_user.id, photo)
        await bot.send_message(message.from_user.id, '–¢—ã –≤—ã–±—Ä–∞–ª –∫–∞—Ä—Ç—É 3000 —Ä—É–±–ª–µ–π\n–° —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏, —Ü–µ–Ω–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç:', reply_markup = nav.pay_3000_rub)
        await message.delete()

    elif message.text == '4000—Ä':
#        photo = open('4000x.jpg', 'rb')
#        await bot.send_photo(message.from_user.id, photo)
        await bot.send_message(message.from_user.id, '–¢—ã –≤—ã–±—Ä–∞–ª –∫–∞—Ä—Ç—É 4000 —Ä—É–±–ª–µ–π\n–° —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏, —Ü–µ–Ω–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç:', reply_markup = nav.pay_4000_rub)
        await message.delete()

    elif message.text == '5000—Ä':
#        photo = open('5000x.jpg', 'rb')
#        await bot.send_photo(message.from_user.id, photo)
        await bot.send_message(message.from_user.id, '–¢—ã –≤—ã–±—Ä–∞–ª –∫–∞—Ä—Ç—É 5000 —Ä—É–±–ª–µ–π\n–° —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏, —Ü–µ–Ω–∞ —Å–æ—Å—Ç–∞–≤–∏—Ç:', reply_markup = nav.pay_5000_rub)
        await message.delete()
 
    elif message.text == '–ù–∞–∑–∞–¥':
        await bot.send_message(message.from_user.id, '–ù–∞–∑–∞–¥', reply_markup = nav.mainMenu)
        await message.delete()

    else:
        pass


@dp.callback_query_handler(text="Back")
async def Back (call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id, '–ù–∞–∑–∞–¥', reply_markup = nav.payMenu)


description = "–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞ ‚Äì —ç—Ç–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 16-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å —Å–∏–º–≤–æ–ª–∞ X. –≠—Ç–æ—Ç –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø—É—Ç–µ–º –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—É–º–º—ã —Ä–∞–≤–Ω–æ–π –Ω–æ–º–∏–Ω–∞–ª—É –∫–∞—Ä—Ç—ã –Ω–∞ —Å—á–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ø–æ–ª–Ω—è–µ–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞."


@dp.callback_query_handler(Text(endswith="rub"))
async def p500rub(call: types.CallbackQuery):
    amounts_dict = {500: 990, 1000: 1790, 1500: 2690, 2000: 3590, 3000: 5390, 4000: 7190, 5000: 8990}
    amount: int = int(call.data[1:-3])
    order_id = str(uuid.uuid4())
    payment_url, payment_id = get_payment_info(order_id, amounts_dict[amount])
    db.add_user_idA(call.from_user.id, payment_id, order_id)
    keyboard = get_buy_keyboard(payment_url)
    await bot.delete_message(call.from_user.id, call.message.message_id)
    text = f"<b>Giftcard –Ω–æ–º–∏–Ω–∞–ª–æ–º - {amount} —Ä—É–±.</b>\n"
    text += description
    await bot.send_message(call.from_user.id, text=text, parse_mode="HTML", reply_markup=keyboard)


@dp.callback_query_handler(text="p1000rub")
async def p1000rub(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_invoice(chat_id=call.from_user.id, title="Giftcard –Ω–æ–º–∏–Ω–∞–ª–æ–º -1000—Ä—É–±.", description="–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞ ‚Äì —ç—Ç–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 16-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å —Å–∏–º–≤–æ–ª–∞ X. –≠—Ç–æ—Ç –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø—É—Ç–µ–º –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—É–º–º—ã —Ä–∞–≤–Ω–æ–π –Ω–æ–º–∏–Ω–∞–ª—É –∫–∞—Ä—Ç—ã –Ω–∞ —Å—á–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ø–æ–ª–Ω—è–µ–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.", payload="p1000", provider_token=SBERBANK, currency="RUB", start_parameter="test_bot", prices=[{"label": "–†—É–±","amount": 179000}])

@dp.callback_query_handler(text="p1500rub")
async def p1500rub(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_invoice(chat_id=call.from_user.id, title="Giftcard –Ω–æ–º–∏–Ω–∞–ª–æ–º -1500—Ä—É–±.", description="–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞ ‚Äì —ç—Ç–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 16-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å —Å–∏–º–≤–æ–ª–∞ X. –≠—Ç–æ—Ç –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø—É—Ç–µ–º –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—É–º–º—ã —Ä–∞–≤–Ω–æ–π –Ω–æ–º–∏–Ω–∞–ª—É –∫–∞—Ä—Ç—ã –Ω–∞ —Å—á–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ø–æ–ª–Ω—è–µ–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.", payload="p1500", provider_token=SBERBANK, currency="RUB", start_parameter="test_bot", prices=[{"label": "–†—É–±","amount": 269000}])

@dp.callback_query_handler(text="p2000rub")
async def p2000rub(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_invoice(chat_id=call.from_user.id, title="Giftcard –Ω–æ–º–∏–Ω–∞–ª–æ–º -2000—Ä—É–±.", description="–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞ ‚Äì —ç—Ç–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 16-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å —Å–∏–º–≤–æ–ª–∞ X. –≠—Ç–æ—Ç –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø—É—Ç–µ–º –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—É–º–º—ã —Ä–∞–≤–Ω–æ–π –Ω–æ–º–∏–Ω–∞–ª—É –∫–∞—Ä—Ç—ã –Ω–∞ —Å—á–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ø–æ–ª–Ω—è–µ–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.", payload="p2000", provider_token=SBERBANK, currency="RUB", start_parameter="test_bot", prices=[{"label": "–†—É–±","amount": 359000}])

@dp.callback_query_handler(text="p3000rub")
async def p3000rub(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_invoice(chat_id=call.from_user.id, title="Giftcard –Ω–æ–º–∏–Ω–∞–ª–æ–º -3000—Ä—É–±.", description="–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞ ‚Äì —ç—Ç–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 16-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å —Å–∏–º–≤–æ–ª–∞ X. –≠—Ç–æ—Ç –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø—É—Ç–µ–º –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—É–º–º—ã —Ä–∞–≤–Ω–æ–π –Ω–æ–º–∏–Ω–∞–ª—É –∫–∞—Ä—Ç—ã –Ω–∞ —Å—á–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ø–æ–ª–Ω—è–µ–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.", payload="p3000", provider_token=SBERBANK, currency="RUB", start_parameter="test_bot", prices=[{"label": "–†—É–±","amount": 539000}])

@dp.callback_query_handler(text="p4000rub")
async def p4000rub(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_invoice(chat_id=call.from_user.id, title="Giftcard –Ω–æ–º–∏–Ω–∞–ª–æ–º -4000—Ä—É–±.", description="–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞ ‚Äì —ç—Ç–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 16-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å —Å–∏–º–≤–æ–ª–∞ X. –≠—Ç–æ—Ç –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø—É—Ç–µ–º –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—É–º–º—ã —Ä–∞–≤–Ω–æ–π –Ω–æ–º–∏–Ω–∞–ª—É –∫–∞—Ä—Ç—ã –Ω–∞ —Å—á–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ø–æ–ª–Ω—è–µ–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.", payload="p4000", provider_token=SBERBANK, currency="RUB", start_parameter="test_bot", prices=[{"label": "–†—É–±","amount": 719000}])

@dp.callback_query_handler(text="p5000rub")
async def p5000rub(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_invoice(chat_id=call.from_user.id, title="Giftcard –Ω–æ–º–∏–Ω–∞–ª–æ–º -5000—Ä—É–±.", description="–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞ ‚Äì —ç—Ç–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç 16-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å —Å–∏–º–≤–æ–ª–∞ X. –≠—Ç–æ—Ç –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –ø—É—Ç–µ–º –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Å—É–º–º—ã —Ä–∞–≤–Ω–æ–π –Ω–æ–º–∏–Ω–∞–ª—É –∫–∞—Ä—Ç—ã –Ω–∞ —Å—á–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ø–æ–ª–Ω—è–µ–º–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.", payload="p5000", provider_token=SBERBANK, currency="RUB", start_parameter="test_bot", prices=[{"label": "–†—É–±","amount": 899000}])

@dp.pre_checkout_query_handler()
async def process_pre_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

    
@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def process_pay(message: types.Message):
    if message.successful_payment.invoice_payload == "p500":
        A = db.countA()
        await bot.send_message(message.from_user.id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n–í–∞—à –∫–æ–¥: <code>{db.get_codA(A)}</code>\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –≥–∏—Ñ—Ç –∫–æ–¥–æ–º - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏.",reply_markup = nav.mainMenu,parse_mode="html")
#        await bot.send_sticker(message.from_user.id, sticker="CAACAgIAAxkBAAEHrkdj53YlraqITVLxHrp87twO3l9EdgACbikAAkizOEvykQRAr7eVay4E")
        await bot.send_message(admin_ID,f"<b>---–ö—É–ø–ª–µ–Ω –Ω–æ–º–µ—Ä {A}, –Ω–æ–º–∏–Ω–∞–ª 500 —Ä—É–±–ª–µ–π---</b>",parse_mode="html")
        if A == 50:
            A = 0
        db.up_nA(A+1)

    elif message.successful_payment.invoice_payload == "p1000":
        B = db.countB()
        await bot.send_message(message.from_user.id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n–í–∞—à –∫–æ–¥: <code>{db.get_codB(B)}</code>",reply_markup = nav.mainMenu,parse_mode="html")
#        await bot.send_sticker(message.from_user.id, sticker="CAACAgIAAxkBAAEHrklj53Yrjc5urNqQcGqJ8TKQkl-0RwAC6yUAAsnrOUtbocbdf_vO0S4E")
        await bot.send_message(admin_ID,f"<b>---–ö—É–ø–ª–µ–Ω –Ω–æ–º–µ—Ä {B}, –Ω–æ–º–∏–Ω–∞–ª 1000 —Ä—É–±–ª–µ–π---</b>",parse_mode="html")
        if B == 50:
            B = 0
        db.up_nB(B+1)

    elif message.successful_payment.invoice_payload == "p1500":
        C = db.countC()
        await bot.send_message(message.from_user.id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n–í–∞—à –∫–æ–¥: <code>{db.get_codC(C)}</code>",reply_markup = nav.mainMenu,parse_mode="html")
#        await bot.send_sticker(message.from_user.id, sticker="CAACAgIAAxkBAAEHrktj53Yvxk9Zoz0wx29urLBqW56l3QACFCoAAuwYOUsaSFgr0qj17i4E")
        await bot.send_message(admin_ID,f"<b>---–ö—É–ø–ª–µ–Ω –Ω–æ–º–µ—Ä {C}, –Ω–æ–º–∏–Ω–∞–ª 1500 —Ä—É–±–ª–µ–π---</b>",parse_mode="html")
        if C == 50:
            C = 0
        db.up_nC(C+1)

    elif message.successful_payment.invoice_payload == "p2000":
        D = db.countD()
        await bot.send_message(message.from_user.id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n–í–∞—à –∫–æ–¥: <code>{db.get_codD(D)}</code>",reply_markup = nav.mainMenu,parse_mode="html")
#        await bot.send_sticker(message.from_user.id, sticker="CAACAgIAAxkBAAEHrk1j53YzvK3JsucUcEzhISaxvurKpAACyy0AAp1PMEsD-4Vw4eSpTC4E")
        await bot.send_message(admin_ID,f"<b>---–ö—É–ø–ª–µ–Ω –Ω–æ–º–µ—Ä {D}, –Ω–æ–º–∏–Ω–∞–ª 2000 —Ä—É–±–ª–µ–π---</b>",parse_mode="html")
        if D == 50:
            D = 0
        db.up_nD(D+1)

    elif message.successful_payment.invoice_payload == "p3000":
        E = db.countE()
        await bot.send_message(message.from_user.id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n–í–∞—à –∫–æ–¥: <code>{db.get_codE(E)}</code>",reply_markup = nav.mainMenu,parse_mode="html")
#        await bot.send_sticker(message.from_user.id, sticker="CAACAgIAAxkBAAEHrk9j53Y5ZIhn_NIDj77pnkDNsR3hTAACWikAAhwDOUv1-yYRQ7fQoC4E")
        await bot.send_message(admin_ID,f"<b>---–ö—É–ø–ª–µ–Ω –Ω–æ–º–µ—Ä {E}, –Ω–æ–º–∏–Ω–∞–ª 3000 —Ä—É–±–ª–µ–π---</b>",parse_mode="html")
        if E == 50:
            E = 0
        db.up_nE(E+1)

    elif message.successful_payment.invoice_payload == "p4000":
        F = db.countF()
        await bot.send_message(message.from_user.id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n–í–∞—à –∫–æ–¥: <code>{db.get_codF(F)}</code>",reply_markup = nav.mainMenu,parse_mode="html")
#        await bot.send_sticker(message.from_user.id, sticker="CAACAgIAAxkBAAEHrlFj53ZAv7zOPut5VHfRUITXe6N9kwACZSkAAhwyOUuWtwQDEpTqcy4E")
        await bot.send_message(admin_ID,f"<b>---–ö—É–ø–ª–µ–Ω –Ω–æ–º–µ—Ä {F}, –Ω–æ–º–∏–Ω–∞–ª 4000 —Ä—É–±–ª–µ–π---</b>",parse_mode="html")
        if F == 50:
            F = 0
        db.up_nF(F+1)

    elif message.successful_payment.invoice_payload == "p5000":
        G = db.countG()
        await bot.send_message(message.from_user.id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n–í–∞—à –∫–æ–¥: <code>{db.get_codG(G)}</code>",reply_markup = nav.mainMenu,parse_mode="html")
#        await bot.send_sticker(message.from_user.id, sticker="CAACAgIAAxkBAAEHrlNj53ZEPlXU1qg19U3ojndeJVNN-AAC4CMAAr_fOUubTY0Fkh7I8S4E")
        await bot.send_message(admin_ID,f"<b>---–ö—É–ø–ª–µ–Ω –Ω–æ–º–µ—Ä {G}, –Ω–æ–º–∏–Ω–∞–ª 5000 —Ä—É–±–ª–µ–π---</b>",parse_mode="html")
        if G == 50:
            G = 0
        db.up_nG(G+1)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates = True)